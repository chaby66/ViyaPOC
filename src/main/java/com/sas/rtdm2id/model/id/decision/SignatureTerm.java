/*
Copyright Â© 2023, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
SPDX-License-Identifier: Apache-2.0
*/
/*
 * Decisions
 * The Decisions API supports the life cycle of decision data.
 *
 * OpenAPI spec version: 7
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sas.rtdm2id.model.id.decision;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Business term defined by the user to be used as a variable for usage in expressions and mappings within rule sets or decisions. Terms of type data grid can have their internal structure defined further using extensions, these are fields that are found within each row of a data grid term.
 */
@ApiModel(description = "Business term defined by the user to be used as a variable for usage in expressions and mappings within rule sets or decisions. Terms of type data grid can have their internal structure defined further using extensions, these are fields that are found within each row of a data grid term.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-06T21:19:27.553+03:00")


public class SignatureTerm {
    @JsonProperty("id")
    private String id = null;

    @JsonProperty("name")
    private String name = null;

    @JsonProperty("description")
    private String description = null;

    @JsonProperty("defaultValue")
    private Object defaultValue = null;

    @JsonProperty("length")
    private Integer length = null;

    @JsonProperty("createdBy")
    private String createdBy = null;

    @JsonProperty("creationTimeStamp")
    private OffsetDateTime creationTimeStamp = null;

    @JsonProperty("modifiedBy")
    private String modifiedBy = null;

    @JsonProperty("modifiedTimeStamp")
    private OffsetDateTime modifiedTimeStamp = null;

    /**
     * The type of data that the term is intended to be used with. Terms can be loosely typed with the &#39;any&#39; type, this type is only assigned by the service when rules POST&#39;ed with &#39;createVariables&#x3D;true&#39; and no type can be determined.
     */
    public enum DataTypeEnum {
        STRING("string"),

        DECIMAL("decimal"),

        INTEGER("integer"),

        BOOLEAN("boolean"),

        DATE("date"),

        DATETIME("datetime"),

        DATAGRID("dataGrid"),

        ANY("any");

        private String value;

        DataTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static DataTypeEnum fromValue(String text) {
            for (DataTypeEnum b : DataTypeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }
    }

    @JsonProperty("dataType")
    private DataTypeEnum dataType = null;

    /**
     * Declaration of how the data is to be used during execution as input, output, both input and output or none if the term is for internal rule set usage only.
     */
    public enum DirectionEnum {
        INPUT("input"),

        OUTPUT("output"),

        INOUT("inOut"),

        NONE("none");

        private String value;

        DirectionEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static DirectionEnum fromValue(String text) {
            for (DirectionEnum b : DirectionEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }
    }

    @JsonProperty("direction")
    private DirectionEnum direction = null;

    @JsonProperty("dataGridExtension")
    private List<SignatureTermExtension> dataGridExtension = null;

    @JsonProperty("globalVariableId")
    private String globalVariableId = null;

    public SignatureTerm id(String id) {
        this.id = id;
        return this;
    }

    /**
     * The system-assigned unique ID for this object
     *
     * @return id
     **/
    @ApiModelProperty(value = "The system-assigned unique ID for this object")
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public SignatureTerm name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Name of the term that can be referenced. Term names must be unique within a rule set.
     *
     * @return name
     **/
    @ApiModelProperty(required = true, value = "Name of the term that can be referenced. Term names must be unique within a rule set.")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public SignatureTerm description(String description) {
        this.description = description;
        return this;
    }

    /**
     * Description of the term
     *
     * @return description
     **/
    @ApiModelProperty(value = "Description of the term")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public SignatureTerm defaultValue(Object defaultValue) {
        this.defaultValue = defaultValue;
        return this;
    }

    /**
     * The initial value of the term.
     *
     * @return defaultValue
     **/
    @ApiModelProperty(value = "The initial value of the term.")
    public Object getDefaultValue() {
        return defaultValue;
    }

    public void setDefaultValue(Object defaultValue) {
        this.defaultValue = defaultValue;
    }

    public SignatureTerm length(Integer length) {
        this.length = length;
        return this;
    }

    /**
     * Suggested length for use when generating code.
     *
     * @return length
     **/
    @ApiModelProperty(value = "Suggested length for use when generating code.")
    public Integer getLength() {
        return length;
    }

    public void setLength(Integer length) {
        this.length = length;
    }

    public SignatureTerm createdBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * The user who created the term.
     *
     * @return createdBy
     **/
    @ApiModelProperty(value = "The user who created the term.")
    public String getCreatedBy() {
        return createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    public SignatureTerm creationTimeStamp(OffsetDateTime creationTimeStamp) {
        this.creationTimeStamp = creationTimeStamp;
        return this;
    }

    /**
     * The date and time that the term was created.
     *
     * @return creationTimeStamp
     **/
    @ApiModelProperty(value = "The date and time that the term was created.")
    public OffsetDateTime getCreationTimeStamp() {
        return creationTimeStamp;
    }

    public void setCreationTimeStamp(OffsetDateTime creationTimeStamp) {
        this.creationTimeStamp = creationTimeStamp;
    }

    public SignatureTerm modifiedBy(String modifiedBy) {
        this.modifiedBy = modifiedBy;
        return this;
    }

    /**
     * The userId of the authenticated user who last updated the term.
     *
     * @return modifiedBy
     **/
    @ApiModelProperty(value = "The userId of the authenticated user who last updated the term.")
    public String getModifiedBy() {
        return modifiedBy;
    }

    public void setModifiedBy(String modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    public SignatureTerm modifiedTimeStamp(OffsetDateTime modifiedTimeStamp) {
        this.modifiedTimeStamp = modifiedTimeStamp;
        return this;
    }

    /**
     * The date and time that the term was last modified.
     *
     * @return modifiedTimeStamp
     **/
    @ApiModelProperty(value = "The date and time that the term was last modified.")
    public OffsetDateTime getModifiedTimeStamp() {
        return modifiedTimeStamp;
    }

    public void setModifiedTimeStamp(OffsetDateTime modifiedTimeStamp) {
        this.modifiedTimeStamp = modifiedTimeStamp;
    }

    public SignatureTerm dataType(DataTypeEnum dataType) {
        this.dataType = dataType;
        return this;
    }

    /**
     * The type of data that the term is intended to be used with. Terms can be loosely typed with the &#39;any&#39; type, this type is only assigned by the service when rules POST&#39;ed with &#39;createVariables&#x3D;true&#39; and no type can be determined.
     *
     * @return dataType
     **/
    @ApiModelProperty(required = true, value = "The type of data that the term is intended to be used with. Terms can be loosely typed with the 'any' type, this type is only assigned by the service when rules POST'ed with 'createVariables=true' and no type can be determined.")
    public DataTypeEnum getDataType() {
        return dataType;
    }

    public void setDataType(DataTypeEnum dataType) {
        this.dataType = dataType;
    }

    public SignatureTerm direction(DirectionEnum direction) {
        this.direction = direction;
        return this;
    }

    /**
     * Declaration of how the data is to be used during execution as input, output, both input and output or none if the term is for internal rule set usage only.
     *
     * @return direction
     **/
    @ApiModelProperty(required = true, value = "Declaration of how the data is to be used during execution as input, output, both input and output or none if the term is for internal rule set usage only.")
    public DirectionEnum getDirection() {
        return direction;
    }

    public void setDirection(DirectionEnum direction) {
        this.direction = direction;
    }

    public SignatureTerm dataGridExtension(List<SignatureTermExtension> dataGridExtension) {
        this.dataGridExtension = dataGridExtension;
        return this;
    }

    public SignatureTerm addDataGridExtensionItem(SignatureTermExtension dataGridExtensionItem) {
        if (this.dataGridExtension == null) {
            this.dataGridExtension = new ArrayList<>();
        }
        this.dataGridExtension.add(dataGridExtensionItem);
        return this;
    }

    /**
     * Fields that are found within the defined data grid type term. These fields are unique only within the data grid and can overlap with other term names. This member is only applicable for terms of type &#39;dataGrid&#39;.
     *
     * @return dataGridExtension
     **/
    @ApiModelProperty(value = "Fields that are found within the defined data grid type term. These fields are unique only within the data grid and can overlap with other term names. This member is only applicable for terms of type 'dataGrid'.")
    public List<SignatureTermExtension> getDataGridExtension() {
        return dataGridExtension;
    }

    public void setDataGridExtension(List<SignatureTermExtension> dataGridExtension) {
        this.dataGridExtension = dataGridExtension;
    }

    public SignatureTerm globalVariableId(String globalVariableId) {
        this.globalVariableId = globalVariableId;
        return this;
    }

    /**
     * The id of the global variable that this term references.
     *
     * @return globalVariableId
     **/
    @ApiModelProperty(value = "The id of the global variable that this term references.")
    public String getGlobalVariableId() {
        return globalVariableId;
    }

    public void setGlobalVariableId(String globalVariableId) {
        this.globalVariableId = globalVariableId;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SignatureTerm signatureTerm = (SignatureTerm) o;
//    return Objects.equals(this.id, signatureTerm.id) &&
        return Objects.equals(this.name.toLowerCase(), signatureTerm.name.toLowerCase());
//            Objects.equals(this.description, signatureTerm.description) &&
//            Objects.equals(this.defaultValue, signatureTerm.defaultValue) &&
//            Objects.equals(this.length, signatureTerm.length) &&
//            Objects.equals(this.createdBy, signatureTerm.createdBy) &&
//            Objects.equals(this.creationTimeStamp, signatureTerm.creationTimeStamp) &&
//            Objects.equals(this.modifiedBy, signatureTerm.modifiedBy) &&
//            Objects.equals(this.modifiedTimeStamp, signatureTerm.modifiedTimeStamp) &&
//            Objects.equals(this.dataType, signatureTerm.dataType) &&
//            Objects.equals(this.direction, signatureTerm.direction) &&
//            Objects.equals(this.dataGridExtension, signatureTerm.dataGridExtension) &&
//            Objects.equals(this.globalVariableId, signatureTerm.globalVariableId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, description, defaultValue, length, createdBy, creationTimeStamp, modifiedBy, modifiedTimeStamp, dataType, direction, dataGridExtension, globalVariableId);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SignatureTerm {\n");

        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
        sb.append("    length: ").append(toIndentedString(length)).append("\n");
        sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
        sb.append("    creationTimeStamp: ").append(toIndentedString(creationTimeStamp)).append("\n");
        sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
        sb.append("    modifiedTimeStamp: ").append(toIndentedString(modifiedTimeStamp)).append("\n");
        sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
        sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
        sb.append("    dataGridExtension: ").append(toIndentedString(dataGridExtension)).append("\n");
        sb.append("    globalVariableId: ").append(toIndentedString(globalVariableId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

